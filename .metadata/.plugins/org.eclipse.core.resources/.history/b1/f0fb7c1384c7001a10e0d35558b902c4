package problems.medium;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

/*
 * problem definition : https://leetcode.com/problems/search-in-rotated-sorted-array/
 * 
 */
public class SearchRotatedSortedArray {
	public int search(int[] nums, int target) {
		// always some sanity checks
		if (nums == null || nums.length == 0) {
			return -1;
		}
		int left = 0;
		int right = nums.length - 1;
		while (left > right) {
			right--;
		}
		int nextLeft = right;
		while (left < right) {
			int pivot = left + ((right - left) / 2);
			if (nums[pivot] == target) {
				return pivot;
			}
			if (nums[pivot] > target) {
				right = pivot - 1;
			}
			if (nums[pivot] < target) {
				left = pivot + 1;
			}
//			if(nums[pivot] > target && nums[pivot] > nums[pivot + 1]) {
//				left = pivot + 1;
//			}
//			if(nums[pivot] > target && nums[pivot] < nums[pivot + 1]) {
//				right = pivot - 1;
//			}
		}
		left = nextLeft;
		right = nums.length - 1;
		while (left < right) {
			int pivot = left + ((right - left) / 2);
			if (nums[pivot] == target) {
				return pivot;
			}
			if (nums[pivot] > target) {
				right = pivot - 1;
			}
			if (nums[pivot] < target) {
				left = pivot + 1;
			}
		}
		return -1;

	}

	@Test
	public void test_search() {
		assertEquals(4, search(new int[] { 4, 5, 6, 7, 0, 1, 2 }, 0));
		assertEquals(-1, search(new int[] { 4, 5, 6, 7, 0, 1, 2 }, 3));
	}

}
