package problems.easy;

import java.util.HashMap;
import java.util.Map;

/*
 * https://leetcode.com/problems/first-bad-version
 * problem definition :
 * You are a product manager and currently leading a team to develop a new product. 
 * Unfortunately, the latest version of your product fails the quality check. 
 * Since each version is developed based on the previous version, 
 * all the versions after a bad version are also bad.
 * Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one,
 * which causes all the following ones to be bad.
 * Example:
 * Given n = 5, and version = 4 is the first bad version.
 * call isBadVersion(3) -> false
 * call isBadVersion(5) -> true
 * call isBadVersion(4) -> true
 * Then 4 is the first bad version.
 * You are given an API bool isBadVersion(version) which will return whether version is bad. 
 * Implement a function to find the first bad version. 
 * You should minimize the number of calls to the API.
 */
public class FirstBadVersion {
	Map<Integer, Boolean> badVersionMap = new HashMap<>();

	/*
	 * will use abit different implementation of regular binary search to reduce the
	 * number of calls to isBadVersion that by left < right to save some iteration
	 * and induce the result
	 */
	public int firstBadVersion(int n) {

	}

	/*
	 * helper method to set the bad versions we want to test with
	 */

	private void fillBadVersionMap(int n, int startBadVersion) {
		for (int i = 1; i <= n; i++) {
			this.badVersionMap.put(i, i >= startBadVersion ? true : false);
		}
	}

	private boolean isBadVersion(int n) {
		return badVersionMap.get(n);
	}
}
