package problems.easy;

import java.util.ArrayList;
import java.util.List;

import problems.common.TreeNode;

public class ClosestBSTValue {
	List<Integer> flattenedBSTArray;

	public int closestValue(TreeNode root, double target) {
		// flattening the BST by inorder traversal, I will end up having array of
		// BST values sorted
		this.flattenedBSTArray = new ArrayList<Integer>();
		_inorderTraversal(root);
		// I may start binary searching the target
        return binarySearch(target);
	}

	private void _inorderTraversal(TreeNode root){
	        if(root == null){
	            return;
	        }
	        _inorderTraversal(root.getLeft());
	        flattenedBSTArray.add(root.getVal());
	        _inorderTraversal(root.getRight());
	        
	    }

	private int binarySearch(double target){
	        int low = 0;
	        int high = this.flattenedBSTArray.size() - 1;
	        double difference = Double.MAX_VALUE;
	        int res = -1;
	        while(low <= high){
	            int mid = low + (high - low) / 2;
	             double currentDifference = 
	                Math.abs(target - this.flattenedBSTArray.get(mid).doubleValue());
	            
	             if(currentDifference == difference) {
	            	 return this.flattenedBSTArray.get(mid);
	             }
	            if(currentDifference < difference) {
	            	difference = currentDifference;
	            	low = mid + 1;  
	            }else {
	            	high = mid - 1;
	            }
	        }
//	        return this.flattenedBSTArray.get(low);
	    }
	
	public static void main(String[] args) {
		TreeNode rootTest = new TreeNode(4);
		rootTest.setLeft(new TreeNode(2));
		rootTest.setRight(new TreeNode(5));
		rootTest.getLeft().setLeft(new TreeNode(1));
		rootTest.getLeft().setRight(new TreeNode(3));
		ClosestBSTValue c = new ClosestBSTValue();
	//	System.out.println(c.closestValue(rootTest, 3.714286));
		
		TreeNode rootTest1 = new TreeNode(2);
		rootTest1.setLeft(new TreeNode(1));
		
		System.out.println(c.closestValue(rootTest1, 3.0));
		
	}
}
