package problems.medium;

import static org.junit.Assert.assertArrayEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;

/*
 * Given a sorted array arr, two integers k and x, 
 * find the k closest elements to x in the array. 
 * The result should also be sorted in ascending order. 
 * If there is a tie, the smaller elements are always preferred.
 * 
 * Example 1:
 * Input: arr = [1,2,3,4,5], k = 4, x = 3
 * Output: [1,2,3,4]
 * 
 * Example 2:
 * Input: arr = [1,2,3,4,5], k = 4, x = -1
 * Output: [1,2,3,4]
 * 
 * Example 3:
 * Input: arr = [1,2,3,4,5], k = 4, x = 6
 * Output: [2, 3, 4, 5] 
 */
public class FindKClosestElements {
/*
 * the best solution for this problem I 've found so far was posted by a guy on leetcode discussion
 * on the below link
 * https://leetcode.com/problems/find-k-closest-elements/discuss/746762/Easy-to-understand-binary-search-method-beats-98
 * 
 * I will try to explain it 
 * 
 * Other approach : 
 */
	public List<Integer> findClosestElements(int[] arr, int k, int x) {
		List<Integer> res = new ArrayList<>();
		int start = 0;
		int end = arr.length - k - 1;
		while (start <= end) {
			int mid = (end - start) / 2 + start;
			if ((x - arr[mid]) > (arr[mid + k] - x)) {
				start = mid + 1;
			} else {
				end = mid - 1;
			}
		}
		for (int i = start; i < start + k; i++) {
			res.add(arr[i]);
		}
		return res;
	}
	/*
	 * easy to understand solution
	 * https://www.youtube.com/watch?v=kSxcZdpV2CA
	 * 
	 */
	public List<Integer> findClosestElements_easy(int[] arr, int k, int x) {
		
		
	}
	
	/*
	 * O(nlogn) solution using the sort helper method offered by Arrays class
	 * then sublist the first k elements of the result
	 * 
	 */
	public List<Integer> findClosestElements_sort(int[] arr, int k, int x) {
		
		
	}
	
	public static void main(String[] args) {
		FindKClosestElements fcke = new FindKClosestElements();
		
		List<Integer> closestList = fcke.findClosestElements(new int[] {1,2,3,4,5}, 4, 3);
		System.out.println(Arrays.toString(closestList.toArray()));
		
	    closestList = fcke.findClosestElements(new int[] {1,2,3,4,5}, 4, -1);
		System.out.println(Arrays.toString(closestList.toArray()));
		
		closestList = fcke.findClosestElements(new int[] {1,2,3,4,5}, 4, 6);
		System.out.println(Arrays.toString(closestList.toArray()));
	}
	@Test
	public void test_findClosestKElements() {
		//case when the target inside the array
		List<Integer> closestList = findClosestElements(new int[] {1,2,3,4,5}, 4, 3);
		assertArrayEquals( new int[] {1,2,3,4}, 
				closestList.stream().mapToInt(elem -> elem.intValue()).toArray());
		
		//case when the target lower than the first element
		closestList = findClosestElements(new int[] {1,2,3,4,5}, 4, -1);
		assertArrayEquals( new int[] {1,2,3,4}, 
				closestList.stream().mapToInt(elem -> elem.intValue()).toArray());
		
		//case when the target bigger than the last element
		closestList = findClosestElements(new int[] {1,2,3,4,5}, 4, 6);
		assertArrayEquals( new int[] {2,3,4, 5}, 
				closestList.stream().mapToInt(elem -> elem.intValue()).toArray());
		
	}

}
