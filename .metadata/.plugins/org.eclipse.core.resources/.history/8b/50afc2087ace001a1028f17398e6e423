package problems.medium;
/*
 * Given an array of integers nums sorted in ascending order, 
 * find the starting and ending position of a given target value.
 * 
 * Your algorithm's runtime complexity must be in the order of O(log n).
 * 
 * If the target is not found in the array, return [-1, -1].
 * 
 * Example 1:
 * Input: nums = [5,7,7,8,8,10], target = 8
 * Output: [3,4]
 * 
 * Example 2:
 * Input: nums = [5,7,7,8,8,10], target = 6
 * Output: [-1,-1]
 * 
 * Constraints:
 * 0 <= nums.length <= 10^5
 * -10^9 <= nums[i] <= 10^9
 * nums is a non decreasing array.
 * -10^9 <= target <= 10^9
 */
public class SearchRange {
	/*
	 * Approach One: linear scan the whole array looking for the target
	 * Algorithm:
	 * 1. starting from the first element of the array checking if the element == target
	 * 2. whenever we found the target we will break the loop as we found the first occurence(leftmost one) of the target
	 * 3. starting from the end of the array (reverse scan) looking for the target, 
	 * once we hit it we break (we found the rightmost one) the last occurence
	 */
	 public int[] searchRange(int[] nums, int target) {
		 int[] targetRange = {-1, -1};
		 
		 
		 
		 
		 return targetRange;
	 }
}
